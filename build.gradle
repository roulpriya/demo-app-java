/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'org.jreleaser:jreleaser-gradle-plugin:1.3.0-SNAPSHOT'
    }
}


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

apply plugin: 'org.jreleaser'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'demo.app.java.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


jreleaser {
    project {
        name = 'app'
    }
    packagers {
        brew {
            active = 'ALWAYS'
        }
    }
    distributions {
        app {

            // Enables or disables the distribution.
            // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
            // Defaults to `ALWAYS`.
            //
            active = 'ALWAYS'

            // The distribution type.
            // Used to determine packager templates.
            // Supported values are = [`JAVA_BINARY`, `SINGLE_JAR`, `JLINK`, `NATIVE_IMAGE`, `NATIVE_PACKAGE`, `BINARY`].
            //
            distributionType = 'JAVA_BINARY'

            // The stereotype of this distribution.
            // Supported values are [`NONE`, `CLI`, `DESKTOP`, `WEB`, `MOBILE`].
            // Defaults to `${project.stereotype}`.
            //
            stereotype = 'CLI'

            //
            executable {
                // Name of the executable launcher.
                // If left undefined, will use ${distribution.name}.
                //
                name = 'app'

                // Executable extension on Linux/MacOS.
                // If left undefined, value will be left empty.
                //
                unixExtension = 'sh'

                // Executable extension on Windows.
                // If left undefined, will use `bat`.
                //
                windowsExtension = 'cmd'
            }

            // A list of artifacts.
            // At least on entry must be present.
            //
            artifact {
                path = "build/${project.name}-${project.version}.zip"
            }
        }
    }
}